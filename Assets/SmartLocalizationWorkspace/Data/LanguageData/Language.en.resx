<?xml version="1.0" encoding="utf-8"?>
<root><!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
	<data name="Common.Back" xml:space="preserve">
		<value>Back</value>
	</data>
	<data name="Common.Error" xml:space="preserve">
		<value>An unexpected error occured</value>
	</data>
	<data name="Common.Ok" xml:space="preserve">
		<value>OK</value>
	</data>
	<data name="GameOverMenu.Ad" xml:space="preserve">
		<value>by watching ad</value>
	</data>
	<data name="GameOverMenu.Exit" xml:space="preserve">
		<value>Quit</value>
	</data>
	<data name="GameOverMenu.Leaderboard" xml:space="preserve">
		<value>Leaderboard</value>
	</data>
	<data name="GameOverMenu.Restart" xml:space="preserve">
		<value>Restart</value>
	</data>
	<data name="GameOverMenu.Resurrect" xml:space="preserve">
		<value>Resurrect ({0})</value>
	</data>
	<data name="GameOverMenu.Reward" xml:space="preserve">
		<value>Earn reward ({0})</value>
	</data>
	<data name="LevelCompleteScreen.Continue" xml:space="preserve">
		<value>Continue</value>
	</data>
	<data name="LevelCompleteScreen.Msg" xml:space="preserve">
		<value>Level complete!</value>
	</data>
	<data name="LevelCompleteScreen.Score" xml:space="preserve">
		<value>Score: {0}</value>
	</data>
	<data name="LevelCompleteScreen.Share" xml:space="preserve">
		<value>Share replay</value>
	</data>
	<data name="LevelCompleteScreen.Time" xml:space="preserve">
		<value>Time: {0}</value>
	</data>
	<data name="LevelStartScreen.Level" xml:space="preserve">
		<value>Level {0}</value>
	</data>
	<data name="MainMenu.Achievements" xml:space="preserve">
		<value>Achievements</value>
	</data>
	<data name="MainMenu.Company" xml:space="preserve">
		<value>by Mr.M</value>
	</data>
	<data name="MainMenu.Exit" xml:space="preserve">
		<value>Quit</value>
	</data>
	<data name="MainMenu.Feedback" xml:space="preserve">
		<value>Leave feedback</value>
	</data>
	<data name="MainMenu.Game" xml:space="preserve">
		<value>Good Cat
Gone Bad</value>
	</data>
	<data name="MainMenu.Leaderboard" xml:space="preserve">
		<value>Leaderboard</value>
	</data>
	<data name="MainMenu.Login" xml:space="preserve">
		<value>Sign in</value>
	</data>
	<data name="MainMenu.Replays" xml:space="preserve">
		<value>Video</value>
	</data>
	<data name="MainMenu.Skills" xml:space="preserve">
		<value>Skills</value>
	</data>
	<data name="MainMenu.Start" xml:space="preserve">
		<value>Play</value>
	</data>
	<data name="Notification.RewardEarn" xml:space="preserve">
		<value>+{0} resurrection</value>
	</data>
	<data name="Notification.RewardUnlock" xml:space="preserve">
		<value>+{0} reward</value>
	</data>
	<data name="Player.Absorb" xml:space="preserve">
		<value>Absorption</value>
	</data>
	<data name="Player.Refuse" xml:space="preserve">
		<value>Meow!</value>
	</data>
	<data name="Player.SmashStreak" xml:space="preserve">
		<value>SMASH STREAK!</value>
	</data>
	<data name="ResurrectionBonus.Take" xml:space="preserve">
		<value>resurrection</value>
	</data>
	<data name="RewardBonus.Take" xml:space="preserve">
		<value>reward</value>
	</data>
	<data name="Skill.CriticalSmashDescription" xml:space="preserve">
		<value>After a smash streak, for {2} sec. there is a {0}% chance to get +{1}% score on every smash</value>
	</data>
	<data name="Skill.CriticalSmashName" xml:space="preserve">
		<value>Where ma money?!</value>
	</data>
	<data name="Skill.CurrentLevel" xml:space="preserve">
		<value>{0} / {1}</value>
	</data>
	<data name="Skill.CurrentLevelDescription" xml:space="preserve">
		<value>Current: {0}</value>
	</data>
	<data name="Skill.DamageAbsorptionDescription" xml:space="preserve">
		<value>After a smash streak, for {2} sec. there is a {0}% chance to absorb {1}% of incoming damage</value>
	</data>
	<data name="Skill.DamageAbsorptionName" xml:space="preserve">
		<value>Can't touch this!</value>
	</data>
	<data name="Skill.Learn" xml:space="preserve">
		<value>Learn</value>
	</data>
	<data name="Skill.NextLevelDescription" xml:space="preserve">
		<value>Next: {0}</value>
	</data>
	<data name="Skill.PermanentCriticalSmashDescription" xml:space="preserve">
		<value>{0}% chance to get +{1}% score on smash</value>
	</data>
	<data name="Skill.PermanentCriticalSmashName" xml:space="preserve">
		<value>Moneymaker</value>
	</data>
	<data name="Skill.PermanentDamageAbsorptionDescription" xml:space="preserve">
		<value>{0}% chance to absorb {1}% of incoming damage</value>
	</data>
	<data name="Skill.PermanentDamageAbsorptionName" xml:space="preserve">
		<value>Get your hands off!</value>
	</data>
	<data name="Skill.PermanentRefuseRateDecreaseDescription" xml:space="preserve">
		<value>Chance of refuse decreases by {0}%</value>
	</data>
	<data name="Skill.PermanentRefuseRateDecreaseName" xml:space="preserve">
		<value>Well-fed and contended</value>
	</data>
	<data name="Skill.PermanentSideSpeedBoostDescription" xml:space="preserve">
		<value>+{0}% side speed</value>
	</data>
	<data name="Skill.PermanentSideSpeedBoostName" xml:space="preserve">
		<value>Brand-new boots</value>
	</data>
	<data name="Skill.RefuseRateDecreaseDescription" xml:space="preserve">
		<value>After a smash streak, there is a {0}% chance to decrease probability of refuse by {1}% for {2} sec.</value>
	</data>
	<data name="Skill.RefuseRateDecreaseName" xml:space="preserve">
		<value>Anything to win</value>
	</data>
	<data name="Skill.SideSpeedBoostDescription" xml:space="preserve">
		<value>After a smash streak, there is a {0}% chance to get +{1}% side speed for {2} sec.</value>
	</data>
	<data name="Skill.SideSpeedBoostName" xml:space="preserve">
		<value>On a roll</value>
	</data>
	<data name="SkillsScreen.AvailableSkillPoints" xml:space="preserve">
		<value>Available points: {0}</value>
	</data>
	<data name="SkillsScreen.Close" xml:space="preserve">
		<value>Close</value>
	</data>
	<data name="TutorialScreen.End" xml:space="preserve">
		<value>Got it!</value>
	</data>
	<data name="TutorialScreen.Next" xml:space="preserve">
		<value>Next</value>
	</data>
	<data name="TutorialScreen.Step1" xml:space="preserve">
		<value>Hello buddy. This short tutorial will explain you how to stop using your favorite swipe and start winning... or die trying</value>
	</data>
	<data name="TutorialScreen.Step2" xml:space="preserve">
		<value>Tapping in this area moves you to corresponding side</value>
	</data>
	<data name="TutorialScreen.Step3" xml:space="preserve">
		<value>This is your health, don't let them cops bring it down</value>
	</data>
	<data name="TutorialScreen.Step4" xml:space="preserve">
		<value>This is your current score and score required for new level, smash some to get some</value>
	</data>
	<data name="TutorialScreen.Step5" xml:space="preserve">
		<value>Sometimes character will refuse to listen you... yep, he is stubborn... just be more insistent</value>
	</data>
	<data name="TutorialScreen.Step6" xml:space="preserve">
		<value>That's it buddy, just don't use swipe and everything will be fine... probably</value>
	</data>
</root>